apply plugin: 'java'
apply plugin: 'c'
import groovy.io.FileType
import org.gradle.internal.os.OperatingSystem

repositories {
    mavenCentral()
}

def stable_jdk = {
    File jdk_home

    if (project.hasProperty('stable_jdk')) {
        jdk_home = file(stable_jdk)

    } else if (System.getenv("JAVA_HOME") != null && !System.getenv("JAVA_HOME").isEmpty()) {
        jdk_home = file(System.getenv("JAVA_HOME"))

    } else if (OperatingSystem.current().isMacOsX()) {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = '/usr/libexec/java_home'
                args = ['-v', '1.8']
                standardOutput = os
            }
            ext.jdk_home_path = os.toString().trim()
        }
        jdk_home = file(jdk_home_path)
    }

    if (jdk_home != null && jdk_home.exists())
        jdk_home.absolutePath
    else
        throw new StopExecutionException("stable_jdk not found")
}

def test_jdk = {
    File jdk_home
    if (project.hasProperty('test_jdk')) {
        jdk_home = file(test_jdk)
    } else {
        if (OperatingSystem.current().isMacOsX()) {
            jdk_home = file('../../../build/macosx-x86_64-normal-server-release/images/j2sdk-bundle/jdk1.8.0.jdk/Contents/Home')
        } else if (OperatingSystem.current().isLinux()) {
            jdk_home = file('../../../build/linux-x86_64-normal-server-release/images/j2sdk-image')
        } else {
            jdk_home = file('../../../build/windows-x86_64-normal-server-release/images/j2sdk-image')
        }
    }

    if ((jdk_home == null || !jdk_home.exists())
            && (System.getenv("JAVA_HOME") != null && !System.getenv("JAVA_HOME").isEmpty())) {
        jdk_home = file(System.getenv("JAVA_HOME"))
    }

    if (jdk_home != null && jdk_home.exists()) {
        jdk_home.absolutePath
    } else {
        throw new StopExecutionException("test_jdk was not specified")
    }
}

def stable_jvm = {
    file(stable_jdk() + (OperatingSystem.current().isWindows() ? "/bin/java.exe" : "/bin/java")).absolutePath
}

def test_jvm = {
    file(test_jdk() + (OperatingSystem.current().isWindows() ? "/bin/java.exe" : "/bin/java")).absolutePath
}

dependencies {
    testCompile('junit:junit:4.12') {
        exclude group: 'org.hamcrest'
    }
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'net.java.dev.jna:jna:4.4.0'
    testCompile 'com.twelvemonkeys.imageio:imageio-tiff:3.3.2'
    testCompile 'org.apache.commons:commons-lang3:3.0'
}


if (OperatingSystem.current().isMacOsX())
    sourceSets.main.java.srcDirs =
            ["../../../jdk/src/share/classes",
             "../../../jdk/src/macosx/classes",
            ]
else if (OperatingSystem.current().isLinux())
    sourceSets.main.java.srcDirs =
            ["../../../jdk/src/share/classes",
             "../../../jdk/src/solaris/classes"
            ]
else
    sourceSets.main.java.srcDirs =
            ["../../../jdk/src/share/classes",
             "../../../jdk/src/windows/classes",
            ]

sourceSets {
    test {
        java {
            srcDir "../../../jdk/testjbu"
            exclude "../../../jdk/testjbu/native"
        }
    }
    jtregtest {
        java {
            def list = []

            def dir = new File("../../../jdk/test")
            dir.eachFileRecurse(FileType.FILES) { file ->
                //def ext = file.name.lastIndexOf('.').with {it != -1 ? file.name[(it+1)..<file.name.length()] : ""}
                if (file.getText("UTF-8").find('@test') /*|| ext.compareTo("java")==0*/) {
                    if (!list.contains(file.getParent())) {
                        list << file.getParent()
                    }
                }
            }
            /*
            list.each {
                println it
            }
            */
            srcDirs = list
        }
    }
    j2dbench {
        java {
            srcDir "../../../jdk/src/share/demo/java2d/J2DBench/src"
        }
    }
}

test.dependsOn.clear()
test.dependsOn tasks.compileTestJava

test {
    systemProperty "testdata", file('../../../jdk/testjbu/testdata').absolutePath

//    systemProperty "sun.java2d.trace", "log,ptime,name:OGLTR_DrawGlyphList"

//  Generate golden images for DroidFontTest and MixedTextTest
//    systemProperty "gentestdata", ""

    outputs.upToDateWhen { false }
    executable = test_jvm()

//  Enable J2D logging (only in debug build)
//  Can be turned on for J2D by adding "#define DEBUG 1" into jdk/src/share/native/sun/java2d/Trace.h

//    environment 'J2D_TRACE_LEVEL', '4'

    systemProperty "java.library.path", file("${buildDir}/libs/env/shared").absolutePath
}

def buildDir = project.buildscript.sourceFile.parentFile.parentFile.parentFile.parentFile

def make_cmd = "make"
def sh_cmd = "sh"

if (OperatingSystem.current().isWindows()) {
    def cyg_make_cmd = new File("c:/cygwin64/bin/make.exe")
    if (cyg_make_cmd.exists()) make_cmd = cyg_make_cmd.absolutePath
    def cyg_sh_cmd = new File("c:/cygwin64/bin/sh.exe")
    if (cyg_sh_cmd.exists()) sh_cmd = cyg_sh_cmd.absolutePath
}

task configure << {
    def pb = new ProcessBuilder().directory(file(buildDir.absolutePath)).command(sh_cmd.toString(), "configure", "--with-freetype=" + (new File(buildDir.absolutePath.toString(), "jb/third_party/freetype")).toString())
    def proc = pb.redirectErrorStream(true).start()
    proc.inputStream.eachLine { println it }
    assert proc.waitFor() == 0
}

task patch_libs << {
    if (OperatingSystem.current().isMacOsX()) {
        def pb = new ProcessBuilder().directory(file(buildDir.absolutePath)).command("install_name_tool", "-change", "/usr/local/lib/libfreetype.6.dylib", "@rpath/libfreetype.dylib.6", "build/macosx-x86_64-normal-server-release/images/j2re-bundle/jre1.8.0.jre/Contents/Home/lib/libfontmanager.dylib")
        def proc = pb.redirectErrorStream(true).start()
        proc.inputStream.eachLine { println it }
        assert proc.waitFor() == 0

        pb = new ProcessBuilder().directory(file(buildDir.absolutePath)).command("install_name_tool", "-change", "/usr/local/lib/libfreetype.6.dylib", "@rpath/libfreetype.dylib.6", "build/macosx-x86_64-normal-server-release/images/j2sdk-bundle/jdk1.8.0.jdk/Contents/Home/jre/lib/libfontmanager.dylib")
        proc = pb.redirectErrorStream(true).start()
        proc.inputStream.eachLine { println it }
        assert proc.waitFor() == 0
    }
}


task make_images << {
    def pb = new ProcessBuilder().command(make_cmd.toString(), "-C", buildDir.absolutePath,
            " COMPILER_WARNINGS_FATAL=false", "images")
    def proc = pb.redirectErrorStream(true).start()
    proc.inputStream.eachLine { println it }
    assert proc.waitFor() == 0
}

task make_clean << {
    def pb = new ProcessBuilder().command(make_cmd.toString(), "-C", buildDir.absolutePath,
            " COMPILER_WARNINGS_FATAL=false", "clean")
    def proc = pb.redirectErrorStream(true).start()
    proc.inputStream.eachLine { println it }
    assert proc.waitFor() == 0
}

task copy_javafx(dependsOn: [make_images]) {
    if (OperatingSystem.current().isMacOsX()) {
        copy {
            from((new File(buildDir.absolutePath.toString(), "jb/third_party/javafx-sdk/jre/lib")).toString())
            into((new File(buildDir.absolutePath.toString(), "build/macosx-x86_64-normal-server-release/images/j2sdk-bundle/jdk1.8.0.jdk/Contents/Home/jre/lib")))
        }
    } else if (OperatingSystem.current().isLinux()) {

    } else {

    }
}

task make(dependsOn: [configure, make_images, patch_libs, copy_javafx]) << {

}

def path_to_jdk = '../../../jdk'

def jtreg_jar = {
    File jtreg_jar
    if (project.hasProperty('jtreg')) {
        jtreg_jar = file(jtreg + "/lib/jtreg.jar")
    } else if (System.getenv("JT_HOME") != null && !System.getenv("JT_HOME").isEmpty()) {
        jtreg_jar = file(System.getenv("JT_HOME") + "/lib/jtreg.jar")
    }
    if (jtreg_jar != null && jtreg_jar.exists()) {
        jtreg_jar.absolutePath
    } else {
        throw new StopExecutionException("jtreg was not specified")
    }
}

def jtreg_javaoptions = {
    if (project.hasProperty('javaoptions')) {
        "-javaoptions:" + javaoptions
    } else {
        ""
    }
}

def jtreg_test_list = {
    if (project.hasProperty('testlist')) {
        def tests = testlist.tokenize(' ')
        tests.collect {
            "$path_to_jdk/test/$it".toString()
        }
    } else {
        ["$path_to_jdk/test".toString()]
    }
}

def exclude_list = {
    if (project.hasProperty('exclude')) {
        "-exclude:\"" + exclude + "\""
    } else {
        "-exclude:$path_to_jdk/test/jbProblemsList.txt".toString()
    }
}

task runjtreg(dependsOn: []) {
    doLast {
        def jdk = test_jdk().toString();
        List<String> parameters = [stable_jvm(),
                                   "-jar", jtreg_jar(),
                                   "-ignore:quiet", "-v", "-a", "-xml",
                                   "-testjdk:" + jdk,
                                   "-compilejdk:" + jdk,
                                   "-r:$path_to_jdk/JTreport".toString(),
                                   "-w:$path_to_jdk/JTwork".toString()]
        if (!exclude_list().isEmpty())
            parameters.addAll(exclude_list().toString())
        if (!jtreg_javaoptions().isEmpty())
            parameters.addAll(jtreg_javaoptions().toString())

        parameters.addAll(jtreg_test_list() as List<String>)

        def pb = new ProcessBuilder().command(parameters)
        def proc = pb.redirectErrorStream(true).start()
        proc.inputStream.eachLine { println it }
        assert proc.waitFor() == 0
    }
}

model {
    platforms {
        x64 {
            architecture "x64"
        }
    }

    components {
        env(NativeLibrarySpec) {
            sources.c {
                source {
                    srcDirs "../../../jdk/testjbu/native"
                }
            }

            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.8'
                    linker.args '-mmacosx-version-min=10.8'

                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    linker.args "Shlwapi.lib", "Advapi32.lib"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
                }
            }
        }
    }
}

if (project.hasProperty('jnitests')) {
    test.dependsOn 'envSharedLibrary'
}

tasks.compileJava.enabled = false
tasks.compileTestJava.dependsOn.clear()
classes.dependsOn.clear()
classes.dependsOn tasks.make_images, tasks.compileTestJava
tasks.cleanClasses.dependsOn tasks.make_clean
